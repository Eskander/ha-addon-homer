name: Auto-Merge & Release

on:
  pull_request:
    branches:
      - main

env:
  WATCH_PACKAGE: "bastienwirtz/homer"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    name: Dependabot Auto-Merge
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
      dependabot_version: ${{ steps.metadata.outputs.new-version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Fetch Dependency Metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2.2.0

      - name: Check Release
        id: check
        run: |
          if [[ "${{ steps.metadata.outputs.dependency-names }}" == "${{ env.WATCH_PACKAGE }}" ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Enable Auto-Merge
        run: |
          gh pr edit "${{ github.event.pull_request.number }}" --add-label "auto-merged"
          gh pr merge --auto --merge "${{ github.event.pull_request.number }}"

  version-bump:
    name: Version Bump
    needs: [auto-merge]
    if: ${{ needs.auto-merge.outputs.is_release == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      addon_version: ${{ steps.bump.outputs.addon_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          ref: main

      - name: Fetch Dependency Metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2.2.0

      - name: Extract and Update Versions
        id: bump
        run: |
          # Extract current version from config.yaml
          CURRENT_VERSION=$(grep "version:" src/config.yaml | sed 's/.*: "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Calculate new addon version (bump minor)
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          ADDON_VERSION="$MAJOR.$NEW_MINOR"
          echo "addon_version=$ADDON_VERSION" >> $GITHUB_OUTPUT
          
          # Update config.yaml with the new addon version
          sed -i "s/version: .*/version: \"$ADDON_VERSION\"/" src/config.yaml
          
          # Update CHANGELOG.md
          NEW_ENTRY="# $ADDON_VERSION\n- Update ${{ env.WATCH_PACKAGE }} to ${{ needs.auto-merge.outputs.dependabot_version }}\n"
          echo -e "$NEW_ENTRY$(cat src/CHANGELOG.md)" > src/CHANGELOG.md

      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add src/config.yaml src/CHANGELOG.md
          git commit -m "Bump add-on version to ${{ steps.bump.outputs.addon_version }}"
          git push

  create-pr:
    name: Create Release PR
    needs: [auto-merge, version-bump]
    if: ${{ needs.auto-merge.outputs.is_release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2
        with:
          ref: main
          fetch-depth: 0

      - name: Get Commit List
        id: get-commits
        run: |
          # Fetch release branch
          git fetch origin release:release --no-tags
          
          # Get the last commit that was merged to release
          LAST_RELEASE_COMMIT=$(git merge-base main release)
          
          # Get all commits between last release and current main
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_RELEASE_COMMIT..main)
          
          # Properly handle multiline output for GitHub Actions
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "commits<<$EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        run: |
          PR_BODY=$(cat <<EOF
          ## Automated Release Update
          
          ### Version: ${{ needs.version-bump.outputs.addon_version }}
          
          ### Dependency Updates
          - Package: ${{ env.WATCH_PACKAGE }}
          - Updated Version: ${{ needs.auto-merge.outputs.dependabot_version }}
          
          ### Commits
          ${{ steps.get-commits.outputs.commits }}
          EOF
          )
          
          gh pr create \
            --base release \
            --head main \
            --title "Release: ${{ needs.version-bump.outputs.addon_version }}" \
            --body "$PR_BODY" \
            --reviewer "Eskander" \
            --assignee "Eskander" \
            --label "deploy"
