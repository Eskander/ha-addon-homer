name: CI/CD
run-name: "CI/CD: ${{ needs.ci.outputs.ADDON_ID }} - ${{ needs.ci.outputs.ADDON_VERSION }}"

on:
  workflow_dispatch:
    inputs:
      addon:
        description: 'Addon to deploy'
        required: true
        type: string
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    env:
      ADDON_ID: ''
      ADDON_VERSION: ''
      BASE_NAME: ''
      BASE_VERSION: ''
    outputs:
      ADDON_ID: ${{ env.ADDON_ID }}
      ADDON_VERSION: ${{ env.ADDON_VERSION }}
      VERSION_PATCH: ${{ steps.version.outputs.VERSION_PATCH }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Fetch Dependabot Metadata
        id: dependabot
        if: github.actor == 'dependabot[bot]'
        uses: dependabot/fetch-metadata@v2

      - name: Determine Base Image Version
        if: github.actor == 'dependabot[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          BASE_NAME="${{ steps.dependabot.outputs.dependency-names }}"
          BASE_VERSION="${{ steps.dependabot.outputs.new-version }}"
          
          if [ -z "$BASE_VERSION" ]; then
            echo "Fetching version from GitHub API..."
            BASE_VERSION=$(gh api repos/$BASE_NAME/releases/latest --jq .tag_name)
          fi
          
          [ -z "$BASE_VERSION" ] && echo "Error: Failed to determine base image version" && exit 1
          
          echo "BASE_NAME=$BASE_NAME" >> $GITHUB_ENV
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV
          
          echo "==> Base image: $BASE_NAME @ $BASE_VERSION"

      - name: Detect Addon
        run: |
          set -e
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ADDON_ID="${{ inputs.addon }}"
          elif [ "${{ github.actor }}" = "dependabot[bot]" ]; then
            ADDON_ID=$(echo "${{ steps.dependabot.outputs.directory }}" | sed 's:/::g')
          else
            ADDON_ID=$(git diff --name-only HEAD~1 | awk -F/ '!/^\./ {print $1}' | sort -u)
            [ $(echo "$ADDON_ID" | wc -l) -gt 1 ] && echo "Error: Only one addon per PR allowed" && exit 1
          fi

          [ -z "$ADDON_ID" ] && echo "Error: No addon detected" && exit 1
          [ ! -d "$ADDON_ID" ] && echo "Error: Addon '$ADDON_ID' not found" && exit 1
          
          echo "ADDON_ID=$ADDON_ID" >> $GITHUB_ENV
          
          echo "==> Detected addon: $ADDON_ID"

      - name: Update Version and Changelog
        id: version
        run: |
          set -e

          # Read and bump version
          CURRENT=$(grep "version:" $ADDON_ID/config.yaml | sed 's/.*: "\(.*\)"/\1/')
          [ -z "$CURRENT" ] && echo "Error: Failed to read version" && exit 1
          
          MAJOR=$(echo "$CURRENT" | cut -d. -f1)
          MINOR=$(echo "$CURRENT" | cut -d. -f2)
          [ -z "$MAJOR" ] && echo "Error: Failed to parse major version" && exit 1
          [ -z "$MINOR" ] && echo "Error: Failed to parse minor version" && exit 1
          
          ADDON_VERSION="$MAJOR.$((MINOR + 1))"

          # Update config
          sed -i "s/version: .*/version: \"$ADDON_VERSION\"/" $ADDON_ID/config.yaml

          # Update changelog
          if [ -n "$BASE_NAME" ] && [ -n "$BASE_VERSION" ]; then
            ENTRY="## $ADDON_VERSION\n- Update $BASE_NAME to $BASE_VERSION\n"
          else
            ENTRY="## $ADDON_VERSION\n- TODO\n"
          fi
          echo -e "$ENTRY$(cat $ADDON_ID/CHANGELOG.md)" > $ADDON_ID/CHANGELOG.md

          # Create patch
          git add $ADDON_ID/config.yaml $ADDON_ID/CHANGELOG.md
          git diff --staged --binary --patch > patch.diff || true

          [ ! -s patch.diff ] && echo "Error: No changes detected for patch" && exit 1

          VERSION_PATCH=$(base64 -w0 patch.diff)
          [ -z "$VERSION_PATCH" ] && echo "Error: Failed to encode patch" && exit 1

          echo "VERSION_PATCH=$VERSION_PATCH" >> $GITHUB_OUTPUT
          echo "ADDON_VERSION=$ADDON_VERSION" >> $GITHUB_ENV
          
          echo "==> Updated $ADDON_ID: $CURRENT -> $ADDON_VERSION"

      - name: Lint Addon Configuration
        uses: frenck/action-addon-linter@v2
        with:
          path: ./${{ env.ADDON_ID }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Test Image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
          DOCKER_BUILD_SUMMARY: false
        with:
          context: ./${{ env.ADDON_ID }}
          platforms: linux/amd64
          load: true
          cache-from: type=gha,scope=buildcache
          cache-to: type=gha,mode=max,scope=buildcache
          tags: test-image:latest

      - name: Test Container Health
        run: |
          set -e
          
          echo "Starting test container..."
          docker run -d --name test-container test-image:latest
          
          TIMEOUT=120
          INTERVAL=5
          
          for ((i=0; i<TIMEOUT; i+=INTERVAL)); do
            HEALTH=$(docker inspect --format='{{.State.Health.Status}}' test-container 2>/dev/null || echo "none")
            STATUS=$(docker inspect --format='{{.State.Status}}' test-container)
            
            echo "[$i s] Status: $STATUS | Health: $HEALTH"
            
            if [ "$HEALTH" = "healthy" ]; then
              echo "==> Container health check passed"
              break
            elif [ "$HEALTH" = "unhealthy" ]; then
              echo "Error: Health check failed"
              docker logs test-container
              exit 1
            elif [ "$STATUS" != "running" ]; then
              echo "Error: Container stopped unexpectedly"
              docker logs test-container
              exit 1
            elif [ "$HEALTH" = "none" ] && [ $i -ge 30 ]; then
              echo "==> Container running (no healthcheck defined)"
              break
            fi
            
            sleep $INTERVAL
          done
          
          if [ $i -ge $TIMEOUT ]; then
            echo "Error: Timeout waiting for container"
            docker logs test-container
            exit 1
          fi
          
          docker stop test-container
          docker rm test-container

      - name: Auto-Merge Dependabot PR
        if: github.actor == 'dependabot[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          gh pr review "$PR_URL" --approve
          gh pr edit "$PR_URL" --add-label auto

          for i in {1..5}; do
            gh pr merge "$PR_URL" --rebase && break || sleep 10
          done
          
          echo "==> Auto-merged PR for $ADDON_ID"

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: [ci]
    if: github.actor == 'dependabot[bot]' || github.event_name == 'workflow_dispatch'
    env:
      ADDON_ID: ${{ needs.ci.outputs.ADDON_ID }}
      ADDON_VERSION: ${{ needs.ci.outputs.ADDON_VERSION }}
      VERSION_PATCH: ${{ needs.ci.outputs.VERSION_PATCH }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Apply Version Patch
        run: |
          set -e
          
          [ -z "$ADDON_ID" ] && echo "Error: ADDON_ID is empty" && exit 1
          [ -z "$ADDON_VERSION" ] && echo "Error: ADDON_VERSION is empty" && exit 1
          [ -z "$VERSION_PATCH" ] && echo "Error: VERSION_PATCH is empty" && exit 1
          
          echo "$VERSION_PATCH" | base64 -d | git apply --index
          
          echo "==> Applied version patch for $ADDON_ID"

      - name: Configure QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: index,manifest
        with:
          images: ghcr.io/${{ github.repository_owner }}/ha-addon-${{ env.ADDON_ID }}
          tags: |
            type=semver,pattern={{major}}.{{minor}},value=${{ env.ADDON_VERSION }}.0
          labels: |
            io.hass.name=${{ github.event.repository.name }}
            io.hass.version=${{ env.ADDON_VERSION }}
            io.hass.description=${{ github.event.repository.description }}
            io.hass.type=addon
            io.hass.arch=amd64|aarch64
            io.hass.url=https://github.com/${{ github.repository }}
          annotations: |
            org.opencontainers.image.authors=${{ github.repository_owner }} <github.com/${{ github.repository_owner }}>

      - name: Build and Push Multi-Arch Image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ./${{ env.ADDON_ID }}
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          cache-from: type=gha,scope=buildcache
          cache-to: type=gha,mode=max,scope=buildcache
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      - name: Commit and Push Version Update
        run: |
          set -e
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add $ADDON_ID/config.yaml $ADDON_ID/CHANGELOG.md
          git commit -m "[$ADDON_ID] Bump version to $ADDON_VERSION"
          git push
          
          echo "==> Published $ADDON_ID v$ADDON_VERSION"
