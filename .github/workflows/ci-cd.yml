name: CI/CD

on:
  workflow_dispatch:
    inputs:
      addon:
        description: 'Addon to deploy'
        required: true
        type: string
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    outputs:
      base: ${{ steps.metadata.outputs.dependency-names }}
      version: ${{ steps.metadata.outputs.new-version || env.BASE_VERSION }}
      deploy: ${{ steps.metadata.outputs.package-ecosystem == 'docker' || github.event_name == 'workflow_dispatch' }}
      addon_version: ${{ steps.prepare-version.outputs.addon_version }}
      patch: ${{ steps.prepare-version.outputs.patch }}
      addon_path: ${{ steps.determine-addon-path.outputs.addon_path }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Get Dependency Metadata
        id: metadata
        if: github.actor == 'dependabot[bot]'
        uses: dependabot/fetch-metadata@v2

      - name: Determine Base Package Version
        id: determine-base-version
        if: github.actor == 'dependabot[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Try to get base version from metadata, fallback to API if not available
          BASE_VERSION="${{ steps.metadata.outputs.new-version }}"

          if [ -z "$BASE_VERSION" ]; then
            BASE_VERSION=$(gh api repos/${{ steps.metadata.outputs.dependency-names }}/releases/latest --jq .tag_name)
          fi

          if [ -z "$BASE_VERSION" ]; then
            echo "Failed to determine base package version"
            exit 1
          fi

          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV

      - name: Determine Addon Path
        id: determine-addon-path
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Use the input from manual trigger
            ADDON="${{ inputs.addon }}"

          elif [ "${{ github.actor }}" = "dependabot[bot]" ]; then
            # Extract addon directory from dependabot metadata
            ADDON=$(echo "${{ steps.metadata.outputs.directory }}" | sed 's:/::g')
            
          else
            # For other PRs, detect changed directories
            ADDON=$(git diff --name-only HEAD~1 | awk -F/ '!/^\./ {print $1}' | sort -u)

            if [ $(echo "$ADDON" | wc -l) -gt 1 ]; then
              echo "Error: Only one updated addon per PR is allowed."
              exit 1
            fi
          fi

          if [ -z "$ADDON" ]; then
            echo "Error: No addon changes detected."
            exit 1
          fi

          if [ ! -d "$ADDON" ]; then
            echo "Error: Addon '$ADDON' does not exist."
            exit 1
          fi
          
          echo "Building addon: $ADDON"
          echo "ADDON_PATH=$ADDON" >> $GITHUB_ENV
          echo "addon_path=$ADDON" >> $GITHUB_OUTPUT

      - name: Prepare Version and Changelog
        id: prepare-version
        run: |
          set -e

          # Read current addon version
          CURRENT_VERSION=$(grep "version:" $ADDON_PATH/config.yaml | sed 's/.*: "\(.*\)"/\1/' || true)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Failed to read current version from config"
            exit 1
          fi

          # Calculate new addon version (minor bump)
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          ADDON_VERSION="$MAJOR.$((MINOR + 1))"

          # Determine dependency metadata for changelog entry
          DEP_BASE="${{ steps.metadata.outputs.dependency-names }}"
          DEP_VER="${{ steps.metadata.outputs.new-version }}"
          if [ -z "$DEP_VER" ]; then
            DEP_VER="$BASE_VERSION"
          fi

          # Update addon version in config
          sed -i "s/version: .*/version: \"$ADDON_VERSION\"/" $ADDON_PATH/config.yaml

          # Prepend changelog entry
          if [ -n "$DEP_BASE" ] && [ -n "$DEP_VER" ]; then
            NEW_ENTRY="## $ADDON_VERSION\n- Update $DEP_BASE to $DEP_VER\n"
          else
            NEW_ENTRY="## $ADDON_VERSION\n- TODO\n"
          fi
          echo -e "$NEW_ENTRY$(cat $ADDON_PATH/CHANGELOG.md)" > $ADDON_PATH/CHANGELOG.md

          # Stage changes and create a patch (do not commit)
          git add $ADDON_PATH/config.yaml $ADDON_PATH/CHANGELOG.md
          git diff --staged --binary --patch > patch.diff || true

          # Encode patch for transport as output
          if [ -s patch.diff ]; then
            base64 -w0 patch.diff > patch.b64
            echo "patch=$(cat patch.b64)" >> $GITHUB_OUTPUT
          else
            echo "patch=" >> $GITHUB_OUTPUT
          fi

          echo "addon_version=$ADDON_VERSION" >> $GITHUB_OUTPUT

      - name: Validate Add-on Configuration
        uses: frenck/action-addon-linter@v2
        with:
          path: ./${{ env.ADDON_PATH }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Test Image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
          DOCKER_BUILD_SUMMARY: false
        with:
          context: ./${{ env.ADDON_PATH }}
          platforms: linux/amd64
          load: true
          cache-from: type=gha,scope=buildcache
          cache-to: type=gha,mode=max,scope=buildcache
          tags: test-image:latest

      - name: Test Container Health
        run: |
          # Start container in detached mode
          CONTAINER_ID=$(docker run --detach --name test-container test-image:latest)
          echo "Started container: $CONTAINER_ID"
          
          # Wait for container to start and run health checks
          echo "Waiting for container to become healthy..."
          TIMEOUT=120
          ELAPSED=0
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' test-container 2>/dev/null || echo "no-healthcheck")
            
            if [ "$HEALTH_STATUS" = "healthy" ]; then
              echo "Container is healthy!"
              break
            elif [ "$HEALTH_STATUS" = "unhealthy" ]; then
              echo "Container health check failed!"
              docker logs test-container
              exit 1
            elif [ "$HEALTH_STATUS" = "no-healthcheck" ]; then
              # If no healthcheck defined, wait for container to be running for 30 seconds
              if [ $ELAPSED -ge 30 ]; then
                STATUS=$(docker inspect --format='{{.State.Status}}' test-container)
                if [ "$STATUS" = "running" ]; then
                  echo "Container is running (no healthcheck defined)"
                  break
                else
                  echo "Container is not running!"
                  docker logs test-container
                  exit 1
                fi
              fi
            fi
            
            echo "Health status: $HEALTH_STATUS (elapsed: ${ELAPSED}s)"
            sleep 5
            ELAPSED=$((ELAPSED + 5))
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Timeout waiting for container to become healthy"
            docker logs test-container
            exit 1
          fi
          
          # Cleanup test container
          docker stop test-container
          docker rm test-container

      - name: Merge Dependabot Pull Request
        if: github.actor == 'dependabot[bot]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Approve and merge Dependabot PR after all checks pass
          gh pr review ${{ github.event.pull_request.html_url }} --approve
          gh pr edit ${{ github.event.pull_request.html_url }} --add-label auto

          for i in {1..5}; do
            gh pr merge ${{ github.event.pull_request.html_url }} --rebase && break || sleep 10
          done

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: [ci]
    if: github.actor == 'dependabot[bot]' || github.event_name == 'workflow_dispatch'
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          ref: main

      - name: Apply Version Patch from CI
        run: |
          set -e

          # Decode and apply patch produced by CI
          echo "Applying version patch from CI"
          echo "${{ needs.ci.outputs.patch }}" | base64 -d > patch.diff
          if [ -s patch.diff ]; then
            git apply --index patch.diff
          else
            echo "No patch to apply"
          fi

          # Export ADDON_VERSION produced in CI
          echo "ADDON_VERSION=${{ needs.ci.outputs.addon_version }}" >> $GITHUB_ENV

      - name: Configure QEMU for Multi-arch Support
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate with GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: index,manifest
        with:
          images: ghcr.io/${{ github.repository_owner }}/ha-addon-${{ needs.ci.outputs.addon_path }}
          tags: |
            type=semver,pattern={{major}}.{{minor}},value=${{ env.ADDON_VERSION }}.0
          labels: |
            io.hass.name=${{ github.event.repository.name }}
            io.hass.version=${{ env.ADDON_VERSION }}
            io.hass.description=${{ github.event.repository.description }}
            io.hass.type=addon
            io.hass.arch=amd64|aarch64
            io.hass.url=https://github.com/${{ github.repository }}
          annotations: |
            org.opencontainers.image.authors=${{ github.repository_owner }} <github.com/${{ github.repository_owner }}>

      - name: Build and Push Multi-arch Image
        uses: docker/build-push-action@v6
        env:
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          context: ./${{ needs.ci.outputs.addon_path }}
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          cache-from: type=gha,scope=buildcache
          cache-to: type=gha,mode=max,scope=buildcache
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      - name: Publish Update
        run: |
          # Configure git and commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ${{ needs.ci.outputs.addon_path }}/config.yaml ${{ needs.ci.outputs.addon_path }}/CHANGELOG.md
          git commit -m "Bump addon version to ${{ env.ADDON_VERSION }}"
          git push
